export default function messageEvents(socket, io) {
    console.log("Client l·∫Øng nghe message events:", socket.id);

    // AI join room ƒë·ªÉ l·∫Øng nghe t·∫•t c·∫£ message
    socket.on("join:ai-listener", () => {
        socket.join("ai-listener");
        console.log(`ü§ñ AI socket ${socket.id} joined room: ai-listener`);
    });

    // User join v√†o room theo combo userId + databaseId
    socket.on("join:room", ({ userId, databaseId }) => {
        const room = `room-${userId}-${databaseId}`;
        socket.join(room);
        console.log(`Socket ${socket.id} joined ${room}`);
    });

    // User g·ª≠i c√¢u h·ªèi
    socket.on("send:message", async ({ message, databaseId, userId }) => {
        console.log(`üì• User ${userId} g·ª≠i: ${message} (DB: ${databaseId})`);

        // Forward c√¢u h·ªèi cho AI listener
        io.to("ai-listener").emit("message:received", {
            question: message,
            databaseId,
            userId,
            receivedAt: new Date()
        });
    });

    // Nh·∫≠n c√¢u tr·∫£ l·ªùi t·ª´ AI
    socket.on("message:answer", ({ answer, question, userId, databaseId }) => {
        console.log(`ü§ñ AI tr·∫£ l·ªùi cho User ${userId} (DB ${databaseId}): ${answer}`);

        const room = `room-${userId}-${databaseId}`;
        io.to(room).emit("answer:message", {
            question,
            answer,
            userId,
            databaseId,
            receivedAt: new Date()
        });
    });
}
